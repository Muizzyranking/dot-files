#!/bin/bash

# Function to restart a process
restart_process() {
    local process_name="$1"
    local detach_flag="$2"

    if [ -z "$process_name" ]; then
        echo "Usage: restart_process <process_name> [--detach|-d]"
        return 1
    fi

    echo "Restarting $process_name..."

    # Kill the process if it's running
    if pgrep "$process_name" >/dev/null; then
        echo "Killing existing $process_name processes..."
        pkill "$process_name"
        sleep 1

        # Force kill if still running
        if pgrep "$process_name" >/dev/null; then
            echo "Force killing $process_name..."
            pkill -9 "$process_name"
            sleep 1
        fi
    else
        echo "$process_name is not currently running"
    fi

    # Start the process
    echo "Starting $process_name..."
    if command -v "$process_name" >/dev/null; then
        if [ "$detach_flag" = "--detach" ] || [ "$detach_flag" = "-d" ]; then
            echo "Starting $process_name detached from terminal..."
            nohup "$process_name" >/dev/null 2>&1 &
            disown
        else
            "$process_name" &
        fi
        echo "$process_name started successfully"
    else
        echo "Error: $process_name command not found"
        return 1
    fi
}

# Parse command line arguments
process_name=""
detach_flag=""

while [[ $# -gt 0 ]]; do
    case $1 in
    --detach | -d)
        detach_flag="--detach"
        shift
        ;;
    *)
        if [ -z "$process_name" ]; then
            process_name="$1"
        else
            echo "Error: Unknown argument '$1'"
            exit 1
        fi
        shift
        ;;
    esac
done

# Example usage
if [ -z "$process_name" ]; then
    echo "Usage: $0 <process_name> [--detach|-d]"
    echo "Example: $0 waybar"
    echo "Example: $0 waybar --detach"
    exit 1
fi

restart_process "$process_name" "$detach_flag"
