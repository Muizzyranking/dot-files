#!/bin/bash
set -euo pipefail

cleanup() {
    echo
    print_message info "Script interrupted....."
    exit 1
}

# Set up trap for cleanup
trap cleanup INT TERM

# Print messages in different colors
print_message() {
    case "$1" in
    error) echo -e "\033[0;31mError: $2\033[0m" ;;
    success) echo -e "\033[0;32mSuccess: $2\033[0m" ;;
    info) echo -e "\033[0;34m$2\033[0m" ;;
    esac
}

# Clone a repository
clone_repo() {
    local repo="$1"
    local repo_url
    local repo_name

    # Determine the actual repository URL
    if [[ $repo =~ ^(https://|git@github) ]]; then
        repo_url="$repo"
    else
        repo_url="git@github.com:muizzyranking/$repo.git"
    fi

    # Extract the repository name for collision checks
    repo_name=$(basename "$repo_url" .git)

    # Check if the directory for the repository already exists
    if [[ -d $repo_name ]]; then
        print_message error "Repository '$repo_name' already exists in the current directory."
        read -r -p "Do you want to overwrite it? This will delete the existing directory. (y/n): " overwrite_choice
        if [[ ! $overwrite_choice =~ ^[Yy]$ ]]; then
            print_message info "Operation cancelled."
            exit 0
        fi
        if command -v trash &>/dev/null; then
            trash "$repo_name"
            print_message success "Existing directory '$repo_name' moved to trash."
        else
            print_message error "'trash' command not found. Exiting."
            exit 1
        fi
    fi

    # Clone the repository
    if git clone "$repo_url"; then
        print_message success "Repository '$repo_name' cloned successfully."
    else
        print_message error "Failed to clone repository."
        exit 1
    fi
}

if [ $# -eq 0 ]; then
    echo "Usage: clone <repository>"
    exit 1
fi

clone_repo "$1"
