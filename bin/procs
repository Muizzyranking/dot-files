#!/bin/bash

export FZF_DEFAULT_OPTS="
--color=fg:#c0caf5,bg:#1a1b26,hl:#bb9af7
--color=fg+:#c0caf5,bg+:#283457,hl+:#7dcfff
--color=info:#7aa2f7,prompt:#f7768e,pointer:#bb9af7
--color=marker:#9ece6a,spinner:#bb9af7,header:#7aa2f7
--color=border:#565f89,label:#7aa2f7,query:#c0caf5
--border=rounded
--prompt='üîç '
--pointer='‚ñ∂'
--marker='‚úì'
"

FILTER_MODE="user"

get_processes() {
    local filter=$1
    case "$filter" in
    "user")
        ps -u $(whoami) -o pid,%cpu,%mem,vsz,rss,stat,start,time,comm,args --sort=-%cpu |
            awk 'NR>1 {
                    printf "%-8s | %-6s | %-6s | %-10s | %-8s | %-5s | %-8s | %-10s | %s\n",
                        $1, $2, $3, $4, $5, $6, $7, $8, substr($0, index($0,$9))
                }'
        ;;
    "all")
        ps aux --sort=-%cpu |
            awk 'NR>1 {
                    printf "%-8s | %-6s | %-6s | %-10s | %-8s | %-5s | %-8s | %-10s | %s\n",
                        $2, $3, $4, $5, $6, $8, $9, $10, substr($0, index($0,$11))
                }'
        ;;
    "high-cpu")
        ps -u $(whoami) -o pid,%cpu,%mem,vsz,rss,stat,start,time,comm,args --sort=-%cpu |
            awk 'NR>1 && $2+0 > 1.0 {
                    printf "%-8s | %-6s | %-6s | %-10s | %-8s | %-5s | %-8s | %-10s | %s\n",
                        $1, $2, $3, $4, $5, $6, $7, $8, substr($0, index($0,$9))
                }'
        ;;
    "high-mem")
        ps -u $(whoami) -o pid,%cpu,%mem,vsz,rss,stat,start,time,comm,args --sort=-%mem |
            awk 'NR>1 && $3+0 > 1.0 {
                    printf "%-8s | %-6s | %-6s | %-10s | %-8s | %-5s | %-8s | %-10s | %s\n",
                        $1, $2, $3, $4, $5, $6, $7, $8, substr($0, index($0,$9))
                }'
        ;;
    esac
}

while true; do
    process_info=$(get_processes "$FILTER_MODE")

    if [[ -z "$process_info" ]]; then
        echo "‚ùå No processes found with filter: $FILTER_MODE"
        exit 0
    fi

    header="PID      | CPU%   | MEM%   | VSZ        | RSS      | STAT  | START    | TIME       | COMMAND
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíÄ CTRL-K: kill | ‚ö° CTRL-F: force kill | üìÇ CTRL-O: open files | üìã CTRL-Y: copy PID üîÑ CTRL-R: refresh | üîÄ CTRL-T: toggle filter [$FILTER_MODE] | ESC: exit"

    selection=$(echo "$process_info" |
        fzf --tmux 95%,85% \
            --header="$header" \
            --prompt="Select process ‚ö° " \
            --preview='
                pid=$(echo {} | awk -F"|" "{print \$1}" | xargs)
                
                echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                echo "‚ïë       ‚ö° PROCESS DETAILS             ‚ïë"
                echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
                
                if [[ -n "$pid" && "$pid" =~ ^[0-9]+$ ]]; then
                    ps -p $pid -o pid,ppid,user,%cpu,%mem,vsz,rss,stat,start,time,command 2>/dev/null || echo "‚ùå Process not found"
                    echo ""
                    
                    if [[ -d "/proc/$pid" ]]; then
                        echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                        echo "‚ïë      üìÇ WORKING DIRECTORY            ‚ïë"
                        echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
                        readlink -f /proc/$pid/cwd 2>/dev/null || echo "üîí Unable to read"
                        echo ""
                        
                        echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                        echo "‚ïë         üíª COMMAND LINE              ‚ïë"
                        echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
                        cat /proc/$pid/cmdline 2>/dev/null | tr "\0" " " || echo "üîí Unable to read"
                        echo ""
                        
                        echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                        echo "‚ïë      üåê NETWORK CONNECTIONS          ‚ïë"
                        echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
                        ss -tuanp 2>/dev/null | grep "pid=$pid" || echo "‚ùå No network connections"
                        echo ""
                        
                        echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                        echo "‚ïë         üìÇ OPEN FILES (top 10)       ‚ïë"
                        echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
                        lsof -p $pid 2>/dev/null | head -n 11 || echo "‚ùå Unable to list open files"
                    else
                        echo "‚ö†Ô∏è  Process information unavailable"
                    fi
                else
                    echo "‚ö†Ô∏è  Invalid PID"
                fi
            ' \
            --preview-window=up:70%:wrap \
            --bind "ctrl-r:reload($(declare -f get_processes); get_processes '$FILTER_MODE')" \
            --bind "ctrl-t:reload(
                if [[ '$FILTER_MODE' == 'user' ]]; then
                    FILTER_MODE='high-cpu'
                elif [[ '$FILTER_MODE' == 'high-cpu' ]]; then
                    FILTER_MODE='high-mem'
                elif [[ '$FILTER_MODE' == 'high-mem' ]]; then
                    FILTER_MODE='all'
                else
                    FILTER_MODE='user'
                fi
                $(declare -f get_processes); get_processes \$FILTER_MODE
            )" \
            --bind "ctrl-y:execute-silent(echo {} | awk -F'|' '{print \$1}' | xargs | clipcopy)" \
            --bind "ctrl-o:execute(
                pid=\$(echo {} | awk -F'|' '{print \$1}' | xargs)
                echo 'üìÇ Open Files for PID: '\$pid
                echo '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ'
                lsof -p \$pid 2>/dev/null | less || echo '‚ùå Unable to list open files'
                read -p '‚èé Press enter to continue...'
            )" \
            --expect=ctrl-k,ctrl-f)

    key=$(echo "$selection" | head -1)
    selected_line=$(echo "$selection" | tail -1)

    if [[ -z "$selected_line" ]]; then
        echo "üëã Exiting..."
        exit 0
    fi

    pid=$(echo "$selected_line" | awk -F'|' '{print $1}' | xargs)
    command=$(echo "$selected_line" | awk -F'|' '{print $9}' | xargs)

    case "$key" in
    ctrl-k)
        if [[ -z "$pid" || ! "$pid" =~ ^[0-9]+$ ]]; then
            echo "‚ö†Ô∏è  Invalid PID"
            read -p "‚èé Press enter to continue..."
        else
            echo "üíÄ Killing process: $command (PID: $pid) with SIGTERM..."
            kill "$pid" 2>/dev/null
            if [[ $? -eq 0 ]]; then
                echo "‚úÖ Process killed successfully"
            else
                echo "‚ùå Failed to kill process"
            fi
            sleep 1
        fi
        ;;
    ctrl-f)
        if [[ -z "$pid" || ! "$pid" =~ ^[0-9]+$ ]]; then
            echo "‚ö†Ô∏è  Invalid PID"
            read -p "‚èé Press enter to continue..."
        else
            echo "‚ö†Ô∏è  WARNING: Force kill process: $command (PID: $pid)?"
            echo "‚ö° This will send SIGKILL (-9) which cannot be caught by the process."
            read -p "Type 'yes' to confirm: " confirm
            if [[ "$confirm" == "yes" ]]; then
                kill -9 "$pid" 2>/dev/null
                if [[ $? -eq 0 ]]; then
                    echo "‚úÖ Process force killed successfully"
                else
                    echo "‚ùå Failed to kill process"
                fi
            else
                echo "üö´ Cancelled."
            fi
            sleep 1
        fi
        ;;
    *) ;;
    esac
done
